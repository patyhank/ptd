// Code generated by ent, DO NOT EDIT.

package postinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldTitle, v))
}

// LastUpdated applies equality check predicate on the "last_updated" field. It's identical to LastUpdatedEQ.
func LastUpdated(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldLastUpdated, v))
}

// CurrentViewing applies equality check predicate on the "current_viewing" field. It's identical to CurrentViewingEQ.
func CurrentViewing(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldCurrentViewing, v))
}

// ForceViewExpire applies equality check predicate on the "force_view_expire" field. It's identical to ForceViewExpireEQ.
func ForceViewExpire(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldForceViewExpire, v))
}

// ShouldArchived applies equality check predicate on the "should_archived" field. It's identical to ShouldArchivedEQ.
func ShouldArchived(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldShouldArchived, v))
}

// Aid applies equality check predicate on the "aid" field. It's identical to AidEQ.
func Aid(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldAid, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldURL, v))
}

// PostContent applies equality check predicate on the "post_content" field. It's identical to PostContentEQ.
func PostContent(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldPostContent, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldEQ(FieldChannelID, vc))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContainsFold(FieldTitle, v))
}

// LastUpdatedEQ applies the EQ predicate on the "last_updated" field.
func LastUpdatedEQ(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldLastUpdated, v))
}

// LastUpdatedNEQ applies the NEQ predicate on the "last_updated" field.
func LastUpdatedNEQ(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldLastUpdated, v))
}

// LastUpdatedIn applies the In predicate on the "last_updated" field.
func LastUpdatedIn(vs ...time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldLastUpdated, vs...))
}

// LastUpdatedNotIn applies the NotIn predicate on the "last_updated" field.
func LastUpdatedNotIn(vs ...time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldLastUpdated, vs...))
}

// LastUpdatedGT applies the GT predicate on the "last_updated" field.
func LastUpdatedGT(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldLastUpdated, v))
}

// LastUpdatedGTE applies the GTE predicate on the "last_updated" field.
func LastUpdatedGTE(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldLastUpdated, v))
}

// LastUpdatedLT applies the LT predicate on the "last_updated" field.
func LastUpdatedLT(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldLastUpdated, v))
}

// LastUpdatedLTE applies the LTE predicate on the "last_updated" field.
func LastUpdatedLTE(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldLastUpdated, v))
}

// CurrentViewingEQ applies the EQ predicate on the "current_viewing" field.
func CurrentViewingEQ(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldCurrentViewing, v))
}

// CurrentViewingNEQ applies the NEQ predicate on the "current_viewing" field.
func CurrentViewingNEQ(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldCurrentViewing, v))
}

// ForceViewExpireEQ applies the EQ predicate on the "force_view_expire" field.
func ForceViewExpireEQ(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldForceViewExpire, v))
}

// ForceViewExpireNEQ applies the NEQ predicate on the "force_view_expire" field.
func ForceViewExpireNEQ(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldForceViewExpire, v))
}

// ForceViewExpireIn applies the In predicate on the "force_view_expire" field.
func ForceViewExpireIn(vs ...time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldForceViewExpire, vs...))
}

// ForceViewExpireNotIn applies the NotIn predicate on the "force_view_expire" field.
func ForceViewExpireNotIn(vs ...time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldForceViewExpire, vs...))
}

// ForceViewExpireGT applies the GT predicate on the "force_view_expire" field.
func ForceViewExpireGT(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldForceViewExpire, v))
}

// ForceViewExpireGTE applies the GTE predicate on the "force_view_expire" field.
func ForceViewExpireGTE(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldForceViewExpire, v))
}

// ForceViewExpireLT applies the LT predicate on the "force_view_expire" field.
func ForceViewExpireLT(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldForceViewExpire, v))
}

// ForceViewExpireLTE applies the LTE predicate on the "force_view_expire" field.
func ForceViewExpireLTE(v time.Time) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldForceViewExpire, v))
}

// ForceViewExpireIsNil applies the IsNil predicate on the "force_view_expire" field.
func ForceViewExpireIsNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIsNull(FieldForceViewExpire))
}

// ForceViewExpireNotNil applies the NotNil predicate on the "force_view_expire" field.
func ForceViewExpireNotNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotNull(FieldForceViewExpire))
}

// ShouldArchivedEQ applies the EQ predicate on the "should_archived" field.
func ShouldArchivedEQ(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldShouldArchived, v))
}

// ShouldArchivedNEQ applies the NEQ predicate on the "should_archived" field.
func ShouldArchivedNEQ(v bool) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldShouldArchived, v))
}

// AidEQ applies the EQ predicate on the "aid" field.
func AidEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldAid, v))
}

// AidNEQ applies the NEQ predicate on the "aid" field.
func AidNEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldAid, v))
}

// AidIn applies the In predicate on the "aid" field.
func AidIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldAid, vs...))
}

// AidNotIn applies the NotIn predicate on the "aid" field.
func AidNotIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldAid, vs...))
}

// AidGT applies the GT predicate on the "aid" field.
func AidGT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldAid, v))
}

// AidGTE applies the GTE predicate on the "aid" field.
func AidGTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldAid, v))
}

// AidLT applies the LT predicate on the "aid" field.
func AidLT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldAid, v))
}

// AidLTE applies the LTE predicate on the "aid" field.
func AidLTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldAid, v))
}

// AidContains applies the Contains predicate on the "aid" field.
func AidContains(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContains(FieldAid, v))
}

// AidHasPrefix applies the HasPrefix predicate on the "aid" field.
func AidHasPrefix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasPrefix(FieldAid, v))
}

// AidHasSuffix applies the HasSuffix predicate on the "aid" field.
func AidHasSuffix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasSuffix(FieldAid, v))
}

// AidIsNil applies the IsNil predicate on the "aid" field.
func AidIsNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIsNull(FieldAid))
}

// AidNotNil applies the NotNil predicate on the "aid" field.
func AidNotNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotNull(FieldAid))
}

// AidEqualFold applies the EqualFold predicate on the "aid" field.
func AidEqualFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEqualFold(FieldAid, v))
}

// AidContainsFold applies the ContainsFold predicate on the "aid" field.
func AidContainsFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContainsFold(FieldAid, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContainsFold(FieldURL, v))
}

// PostContentEQ applies the EQ predicate on the "post_content" field.
func PostContentEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEQ(FieldPostContent, v))
}

// PostContentNEQ applies the NEQ predicate on the "post_content" field.
func PostContentNEQ(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNEQ(FieldPostContent, v))
}

// PostContentIn applies the In predicate on the "post_content" field.
func PostContentIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIn(FieldPostContent, vs...))
}

// PostContentNotIn applies the NotIn predicate on the "post_content" field.
func PostContentNotIn(vs ...string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotIn(FieldPostContent, vs...))
}

// PostContentGT applies the GT predicate on the "post_content" field.
func PostContentGT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGT(FieldPostContent, v))
}

// PostContentGTE applies the GTE predicate on the "post_content" field.
func PostContentGTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldGTE(FieldPostContent, v))
}

// PostContentLT applies the LT predicate on the "post_content" field.
func PostContentLT(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLT(FieldPostContent, v))
}

// PostContentLTE applies the LTE predicate on the "post_content" field.
func PostContentLTE(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldLTE(FieldPostContent, v))
}

// PostContentContains applies the Contains predicate on the "post_content" field.
func PostContentContains(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContains(FieldPostContent, v))
}

// PostContentHasPrefix applies the HasPrefix predicate on the "post_content" field.
func PostContentHasPrefix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasPrefix(FieldPostContent, v))
}

// PostContentHasSuffix applies the HasSuffix predicate on the "post_content" field.
func PostContentHasSuffix(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldHasSuffix(FieldPostContent, v))
}

// PostContentIsNil applies the IsNil predicate on the "post_content" field.
func PostContentIsNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIsNull(FieldPostContent))
}

// PostContentNotNil applies the NotNil predicate on the "post_content" field.
func PostContentNotNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotNull(FieldPostContent))
}

// PostContentEqualFold applies the EqualFold predicate on the "post_content" field.
func PostContentEqualFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldEqualFold(FieldPostContent, v))
}

// PostContentContainsFold applies the ContainsFold predicate on the "post_content" field.
func PostContentContainsFold(v string) predicate.PostInfo {
	return predicate.PostInfo(sql.FieldContainsFold(FieldPostContent, v))
}

// ContentMessagesIsNil applies the IsNil predicate on the "content_messages" field.
func ContentMessagesIsNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldIsNull(FieldContentMessages))
}

// ContentMessagesNotNil applies the NotNil predicate on the "content_messages" field.
func ContentMessagesNotNil() predicate.PostInfo {
	return predicate.PostInfo(sql.FieldNotNull(FieldContentMessages))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldEQ(FieldChannelID, vc))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldNEQ(FieldChannelID, vc))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...snowflake.ID) predicate.PostInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.PostInfo(sql.FieldIn(FieldChannelID, v...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...snowflake.ID) predicate.PostInfo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.PostInfo(sql.FieldNotIn(FieldChannelID, v...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldGT(FieldChannelID, vc))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldGTE(FieldChannelID, vc))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldLT(FieldChannelID, vc))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v snowflake.ID) predicate.PostInfo {
	vc := uint64(v)
	return predicate.PostInfo(sql.FieldLTE(FieldChannelID, vc))
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.PostInfo {
	return predicate.PostInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.PostInfo {
	return predicate.PostInfo(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostInfo) predicate.PostInfo {
	return predicate.PostInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostInfo) predicate.PostInfo {
	return predicate.PostInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostInfo) predicate.PostInfo {
	return predicate.PostInfo(sql.NotPredicates(p))
}

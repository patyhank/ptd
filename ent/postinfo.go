// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/ent/postinfo"
)

// PostInfo is the model entity for the PostInfo schema.
type PostInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// CurrentViewing holds the value of the "current_viewing" field.
	CurrentViewing bool `json:"current_viewing,omitempty"`
	// ForceViewExpire holds the value of the "force_view_expire" field.
	ForceViewExpire time.Time `json:"force_view_expire,omitempty"`
	// ShouldArchived holds the value of the "should_archived" field.
	ShouldArchived bool `json:"should_archived,omitempty"`
	// Aid holds the value of the "aid" field.
	Aid string `json:"aid,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// PostContent holds the value of the "post_content" field.
	PostContent string `json:"post_content,omitempty"`
	// ContentMessages holds the value of the "content_messages" field.
	ContentMessages []snowflake.ID `json:"content_messages,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID snowflake.ID `json:"channel_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostInfoQuery when eager-loading is set.
	Edges        PostInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostInfoEdges holds the relations/edges for other nodes in the graph.
type PostInfoEdges struct {
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e PostInfoEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postinfo.FieldContentMessages:
			values[i] = new([]byte)
		case postinfo.FieldCurrentViewing, postinfo.FieldShouldArchived:
			values[i] = new(sql.NullBool)
		case postinfo.FieldID, postinfo.FieldChannelID:
			values[i] = new(sql.NullInt64)
		case postinfo.FieldTitle, postinfo.FieldAid, postinfo.FieldURL, postinfo.FieldPostContent:
			values[i] = new(sql.NullString)
		case postinfo.FieldLastUpdated, postinfo.FieldForceViewExpire:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostInfo fields.
func (pi *PostInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case postinfo.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pi.Title = value.String
			}
		case postinfo.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				pi.LastUpdated = value.Time
			}
		case postinfo.FieldCurrentViewing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field current_viewing", values[i])
			} else if value.Valid {
				pi.CurrentViewing = value.Bool
			}
		case postinfo.FieldForceViewExpire:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field force_view_expire", values[i])
			} else if value.Valid {
				pi.ForceViewExpire = value.Time
			}
		case postinfo.FieldShouldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field should_archived", values[i])
			} else if value.Valid {
				pi.ShouldArchived = value.Bool
			}
		case postinfo.FieldAid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aid", values[i])
			} else if value.Valid {
				pi.Aid = value.String
			}
		case postinfo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pi.URL = value.String
			}
		case postinfo.FieldPostContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_content", values[i])
			} else if value.Valid {
				pi.PostContent = value.String
			}
		case postinfo.FieldContentMessages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content_messages", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pi.ContentMessages); err != nil {
					return fmt.Errorf("unmarshal field content_messages: %w", err)
				}
			}
		case postinfo.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				pi.ChannelID = snowflake.ID(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostInfo.
// This includes values selected through modifiers, order, etc.
func (pi *PostInfo) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryMessages queries the "messages" edge of the PostInfo entity.
func (pi *PostInfo) QueryMessages() *MessageQuery {
	return NewPostInfoClient(pi.config).QueryMessages(pi)
}

// Update returns a builder for updating this PostInfo.
// Note that you need to call PostInfo.Unwrap() before calling this method if this PostInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PostInfo) Update() *PostInfoUpdateOne {
	return NewPostInfoClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PostInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PostInfo) Unwrap() *PostInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PostInfo) String() string {
	var builder strings.Builder
	builder.WriteString("PostInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("title=")
	builder.WriteString(pi.Title)
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(pi.LastUpdated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("current_viewing=")
	builder.WriteString(fmt.Sprintf("%v", pi.CurrentViewing))
	builder.WriteString(", ")
	builder.WriteString("force_view_expire=")
	builder.WriteString(pi.ForceViewExpire.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("should_archived=")
	builder.WriteString(fmt.Sprintf("%v", pi.ShouldArchived))
	builder.WriteString(", ")
	builder.WriteString("aid=")
	builder.WriteString(pi.Aid)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pi.URL)
	builder.WriteString(", ")
	builder.WriteString("post_content=")
	builder.WriteString(pi.PostContent)
	builder.WriteString(", ")
	builder.WriteString("content_messages=")
	builder.WriteString(fmt.Sprintf("%v", pi.ContentMessages))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ChannelID))
	builder.WriteByte(')')
	return builder.String()
}

// PostInfos is a parsable slice of PostInfo.
type PostInfos []*PostInfo

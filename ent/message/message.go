// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldRawContent holds the string denoting the raw_content field in the database.
	FieldRawContent = "raw_content"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMessageID holds the string denoting the message_id field in the database.
	FieldMessageID = "message_id"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeParentPost holds the string denoting the parent_post edge name in mutations.
	EdgeParentPost = "parent_post"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "messages"
	// AuthorInverseTable is the table name for the Author entity.
	// It exists in this package in order to avoid circular dependency with the "author" package.
	AuthorInverseTable = "authors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "message_author"
	// ParentPostTable is the table that holds the parent_post relation/edge.
	ParentPostTable = "messages"
	// ParentPostInverseTable is the table name for the PostInfo entity.
	// It exists in this package in order to avoid circular dependency with the "postinfo" package.
	ParentPostInverseTable = "post_infos"
	// ParentPostColumn is the table column denoting the parent_post relation/edge.
	ParentPostColumn = "post_info_messages"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldContent,
	FieldRawContent,
	FieldCreatedAt,
	FieldMessageID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"message_author",
	"post_info_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMessageID holds the default value on creation for the "message_id" field.
	DefaultMessageID snowflake.ID
	// MessageIDValidator is a validator for the "message_id" field. It is called by the builders before save.
	MessageIDValidator func(uint64) error
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByRawContent orders the results by the raw_content field.
func ByRawContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawContent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMessageID orders the results by the message_id field.
func ByMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageID, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentPostField orders the results by parent_post field.
func ByParentPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentPostStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AuthorTable, AuthorColumn),
	)
}
func newParentPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParentPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentPostTable, ParentPostColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldHash, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// RawContent applies equality check predicate on the "raw_content" field. It's identical to RawContentEQ.
func RawContent(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRawContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldEQ(FieldMessageID, vc))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldHash, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// RawContentEQ applies the EQ predicate on the "raw_content" field.
func RawContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRawContent, v))
}

// RawContentNEQ applies the NEQ predicate on the "raw_content" field.
func RawContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldRawContent, v))
}

// RawContentIn applies the In predicate on the "raw_content" field.
func RawContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldRawContent, vs...))
}

// RawContentNotIn applies the NotIn predicate on the "raw_content" field.
func RawContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldRawContent, vs...))
}

// RawContentGT applies the GT predicate on the "raw_content" field.
func RawContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldRawContent, v))
}

// RawContentGTE applies the GTE predicate on the "raw_content" field.
func RawContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldRawContent, v))
}

// RawContentLT applies the LT predicate on the "raw_content" field.
func RawContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldRawContent, v))
}

// RawContentLTE applies the LTE predicate on the "raw_content" field.
func RawContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldRawContent, v))
}

// RawContentContains applies the Contains predicate on the "raw_content" field.
func RawContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldRawContent, v))
}

// RawContentHasPrefix applies the HasPrefix predicate on the "raw_content" field.
func RawContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldRawContent, v))
}

// RawContentHasSuffix applies the HasSuffix predicate on the "raw_content" field.
func RawContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldRawContent, v))
}

// RawContentEqualFold applies the EqualFold predicate on the "raw_content" field.
func RawContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldRawContent, v))
}

// RawContentContainsFold applies the ContainsFold predicate on the "raw_content" field.
func RawContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldRawContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldEQ(FieldMessageID, vc))
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldNEQ(FieldMessageID, vc))
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...snowflake.ID) predicate.Message {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Message(sql.FieldIn(FieldMessageID, v...))
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...snowflake.ID) predicate.Message {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Message(sql.FieldNotIn(FieldMessageID, v...))
}

// MessageIDGT applies the GT predicate on the "message_id" field.
func MessageIDGT(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldGT(FieldMessageID, vc))
}

// MessageIDGTE applies the GTE predicate on the "message_id" field.
func MessageIDGTE(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldGTE(FieldMessageID, vc))
}

// MessageIDLT applies the LT predicate on the "message_id" field.
func MessageIDLT(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldLT(FieldMessageID, vc))
}

// MessageIDLTE applies the LTE predicate on the "message_id" field.
func MessageIDLTE(v snowflake.ID) predicate.Message {
	vc := uint64(v)
	return predicate.Message(sql.FieldLTE(FieldMessageID, vc))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.Author) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentPost applies the HasEdge predicate on the "parent_post" edge.
func HasParentPost() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentPostTable, ParentPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentPostWith applies the HasEdge predicate on the "parent_post" edge with a given conditions (other predicates).
func HasParentPostWith(preds ...predicate.PostInfo) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newParentPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}

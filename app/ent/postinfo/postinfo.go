// Code generated by ent, DO NOT EDIT.

package postinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
)

const (
	// Label holds the string label denoting the postinfo type in the database.
	Label = "post_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// FieldCurrentViewing holds the string denoting the current_viewing field in the database.
	FieldCurrentViewing = "current_viewing"
	// FieldSearchKeywords holds the string denoting the search_keywords field in the database.
	FieldSearchKeywords = "search_keywords"
	// FieldForceViewExpire holds the string denoting the force_view_expire field in the database.
	FieldForceViewExpire = "force_view_expire"
	// FieldShouldArchived holds the string denoting the should_archived field in the database.
	FieldShouldArchived = "should_archived"
	// FieldAid holds the string denoting the aid field in the database.
	FieldAid = "aid"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPostContent holds the string denoting the post_content field in the database.
	FieldPostContent = "post_content"
	// FieldContentMessages holds the string denoting the content_messages field in the database.
	FieldContentMessages = "content_messages"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the postinfo in the database.
	Table = "post_infos"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "post_info_messages"
)

// Columns holds all SQL columns for postinfo fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldLastUpdated,
	FieldCurrentViewing,
	FieldSearchKeywords,
	FieldForceViewExpire,
	FieldShouldArchived,
	FieldAid,
	FieldURL,
	FieldPostContent,
	FieldContentMessages,
	FieldChannelID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// DefaultCurrentViewing holds the default value on creation for the "current_viewing" field.
	DefaultCurrentViewing bool
	// DefaultShouldArchived holds the default value on creation for the "should_archived" field.
	DefaultShouldArchived bool
	// DefaultChannelID holds the default value on creation for the "channel_id" field.
	DefaultChannelID snowflake.ID
	// ChannelIDValidator is a validator for the "channel_id" field. It is called by the builders before save.
	ChannelIDValidator func(uint64) error
)

// OrderOption defines the ordering options for the PostInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByCurrentViewing orders the results by the current_viewing field.
func ByCurrentViewing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentViewing, opts...).ToFunc()
}

// ByForceViewExpire orders the results by the force_view_expire field.
func ByForceViewExpire(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForceViewExpire, opts...).ToFunc()
}

// ByShouldArchived orders the results by the should_archived field.
func ByShouldArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShouldArchived, opts...).ToFunc()
}

// ByAid orders the results by the aid field.
func ByAid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAid, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPostContent orders the results by the post_content field.
func ByPostContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostContent, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
	)
}

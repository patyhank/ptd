// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/app/ent/message"
	"github.com/patyhank/ptd/app/ent/postinfo"
)

// PostInfoCreate is the builder for creating a PostInfo entity.
type PostInfoCreate struct {
	config
	mutation *PostInfoMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (pic *PostInfoCreate) SetTitle(s string) *PostInfoCreate {
	pic.mutation.SetTitle(s)
	return pic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableTitle(s *string) *PostInfoCreate {
	if s != nil {
		pic.SetTitle(*s)
	}
	return pic
}

// SetLastUpdated sets the "last_updated" field.
func (pic *PostInfoCreate) SetLastUpdated(t time.Time) *PostInfoCreate {
	pic.mutation.SetLastUpdated(t)
	return pic
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableLastUpdated(t *time.Time) *PostInfoCreate {
	if t != nil {
		pic.SetLastUpdated(*t)
	}
	return pic
}

// SetCurrentViewing sets the "current_viewing" field.
func (pic *PostInfoCreate) SetCurrentViewing(b bool) *PostInfoCreate {
	pic.mutation.SetCurrentViewing(b)
	return pic
}

// SetNillableCurrentViewing sets the "current_viewing" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableCurrentViewing(b *bool) *PostInfoCreate {
	if b != nil {
		pic.SetCurrentViewing(*b)
	}
	return pic
}

// SetSearchKeywords sets the "search_keywords" field.
func (pic *PostInfoCreate) SetSearchKeywords(s []string) *PostInfoCreate {
	pic.mutation.SetSearchKeywords(s)
	return pic
}

// SetForceViewExpire sets the "force_view_expire" field.
func (pic *PostInfoCreate) SetForceViewExpire(t time.Time) *PostInfoCreate {
	pic.mutation.SetForceViewExpire(t)
	return pic
}

// SetNillableForceViewExpire sets the "force_view_expire" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableForceViewExpire(t *time.Time) *PostInfoCreate {
	if t != nil {
		pic.SetForceViewExpire(*t)
	}
	return pic
}

// SetShouldArchived sets the "should_archived" field.
func (pic *PostInfoCreate) SetShouldArchived(b bool) *PostInfoCreate {
	pic.mutation.SetShouldArchived(b)
	return pic
}

// SetNillableShouldArchived sets the "should_archived" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableShouldArchived(b *bool) *PostInfoCreate {
	if b != nil {
		pic.SetShouldArchived(*b)
	}
	return pic
}

// SetAid sets the "aid" field.
func (pic *PostInfoCreate) SetAid(s string) *PostInfoCreate {
	pic.mutation.SetAid(s)
	return pic
}

// SetNillableAid sets the "aid" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableAid(s *string) *PostInfoCreate {
	if s != nil {
		pic.SetAid(*s)
	}
	return pic
}

// SetURL sets the "url" field.
func (pic *PostInfoCreate) SetURL(s string) *PostInfoCreate {
	pic.mutation.SetURL(s)
	return pic
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableURL(s *string) *PostInfoCreate {
	if s != nil {
		pic.SetURL(*s)
	}
	return pic
}

// SetPostContent sets the "post_content" field.
func (pic *PostInfoCreate) SetPostContent(s string) *PostInfoCreate {
	pic.mutation.SetPostContent(s)
	return pic
}

// SetNillablePostContent sets the "post_content" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillablePostContent(s *string) *PostInfoCreate {
	if s != nil {
		pic.SetPostContent(*s)
	}
	return pic
}

// SetContentMessages sets the "content_messages" field.
func (pic *PostInfoCreate) SetContentMessages(s []snowflake.ID) *PostInfoCreate {
	pic.mutation.SetContentMessages(s)
	return pic
}

// SetChannelID sets the "channel_id" field.
func (pic *PostInfoCreate) SetChannelID(s snowflake.ID) *PostInfoCreate {
	pic.mutation.SetChannelID(s)
	return pic
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (pic *PostInfoCreate) SetNillableChannelID(s *snowflake.ID) *PostInfoCreate {
	if s != nil {
		pic.SetChannelID(*s)
	}
	return pic
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (pic *PostInfoCreate) AddMessageIDs(ids ...int) *PostInfoCreate {
	pic.mutation.AddMessageIDs(ids...)
	return pic
}

// AddMessages adds the "messages" edges to the Message entity.
func (pic *PostInfoCreate) AddMessages(m ...*Message) *PostInfoCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pic.AddMessageIDs(ids...)
}

// Mutation returns the PostInfoMutation object of the builder.
func (pic *PostInfoCreate) Mutation() *PostInfoMutation {
	return pic.mutation
}

// Save creates the PostInfo in the database.
func (pic *PostInfoCreate) Save(ctx context.Context) (*PostInfo, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PostInfoCreate) SaveX(ctx context.Context) *PostInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PostInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PostInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PostInfoCreate) defaults() {
	if _, ok := pic.mutation.LastUpdated(); !ok {
		v := postinfo.DefaultLastUpdated()
		pic.mutation.SetLastUpdated(v)
	}
	if _, ok := pic.mutation.CurrentViewing(); !ok {
		v := postinfo.DefaultCurrentViewing
		pic.mutation.SetCurrentViewing(v)
	}
	if _, ok := pic.mutation.ShouldArchived(); !ok {
		v := postinfo.DefaultShouldArchived
		pic.mutation.SetShouldArchived(v)
	}
	if _, ok := pic.mutation.ChannelID(); !ok {
		v := postinfo.DefaultChannelID
		pic.mutation.SetChannelID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PostInfoCreate) check() error {
	if _, ok := pic.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "PostInfo.last_updated"`)}
	}
	if _, ok := pic.mutation.CurrentViewing(); !ok {
		return &ValidationError{Name: "current_viewing", err: errors.New(`ent: missing required field "PostInfo.current_viewing"`)}
	}
	if _, ok := pic.mutation.ShouldArchived(); !ok {
		return &ValidationError{Name: "should_archived", err: errors.New(`ent: missing required field "PostInfo.should_archived"`)}
	}
	if _, ok := pic.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "PostInfo.channel_id"`)}
	}
	if v, ok := pic.mutation.ChannelID(); ok {
		if err := postinfo.ChannelIDValidator(uint64(v)); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PostInfo.channel_id": %w`, err)}
		}
	}
	return nil
}

func (pic *PostInfoCreate) sqlSave(ctx context.Context) (*PostInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PostInfoCreate) createSpec() (*PostInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &PostInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(postinfo.Table, sqlgraph.NewFieldSpec(postinfo.FieldID, field.TypeInt))
	)
	if value, ok := pic.mutation.Title(); ok {
		_spec.SetField(postinfo.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pic.mutation.LastUpdated(); ok {
		_spec.SetField(postinfo.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := pic.mutation.CurrentViewing(); ok {
		_spec.SetField(postinfo.FieldCurrentViewing, field.TypeBool, value)
		_node.CurrentViewing = value
	}
	if value, ok := pic.mutation.SearchKeywords(); ok {
		_spec.SetField(postinfo.FieldSearchKeywords, field.TypeJSON, value)
		_node.SearchKeywords = value
	}
	if value, ok := pic.mutation.ForceViewExpire(); ok {
		_spec.SetField(postinfo.FieldForceViewExpire, field.TypeTime, value)
		_node.ForceViewExpire = value
	}
	if value, ok := pic.mutation.ShouldArchived(); ok {
		_spec.SetField(postinfo.FieldShouldArchived, field.TypeBool, value)
		_node.ShouldArchived = value
	}
	if value, ok := pic.mutation.Aid(); ok {
		_spec.SetField(postinfo.FieldAid, field.TypeString, value)
		_node.Aid = value
	}
	if value, ok := pic.mutation.URL(); ok {
		_spec.SetField(postinfo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pic.mutation.PostContent(); ok {
		_spec.SetField(postinfo.FieldPostContent, field.TypeString, value)
		_node.PostContent = value
	}
	if value, ok := pic.mutation.ContentMessages(); ok {
		_spec.SetField(postinfo.FieldContentMessages, field.TypeJSON, value)
		_node.ContentMessages = value
	}
	if value, ok := pic.mutation.ChannelID(); ok {
		_spec.SetField(postinfo.FieldChannelID, field.TypeUint64, value)
		_node.ChannelID = value
	}
	if nodes := pic.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostInfoCreateBulk is the builder for creating many PostInfo entities in bulk.
type PostInfoCreateBulk struct {
	config
	err      error
	builders []*PostInfoCreate
}

// Save creates the PostInfo entities in the database.
func (picb *PostInfoCreateBulk) Save(ctx context.Context) ([]*PostInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PostInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PostInfoCreateBulk) SaveX(ctx context.Context) []*PostInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PostInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PostInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package author

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/patyhank/ptd/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldID, id))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldAuthorID, v))
}

// LastSeen applies equality check predicate on the "last_seen" field. It's identical to LastSeenEQ.
func LastSeen(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldLastSeen, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldAuthorID, vs...))
}

// AuthorIDGT applies the GT predicate on the "author_id" field.
func AuthorIDGT(v string) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldAuthorID, v))
}

// AuthorIDGTE applies the GTE predicate on the "author_id" field.
func AuthorIDGTE(v string) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldAuthorID, v))
}

// AuthorIDLT applies the LT predicate on the "author_id" field.
func AuthorIDLT(v string) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldAuthorID, v))
}

// AuthorIDLTE applies the LTE predicate on the "author_id" field.
func AuthorIDLTE(v string) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldAuthorID, v))
}

// AuthorIDContains applies the Contains predicate on the "author_id" field.
func AuthorIDContains(v string) predicate.Author {
	return predicate.Author(sql.FieldContains(FieldAuthorID, v))
}

// AuthorIDHasPrefix applies the HasPrefix predicate on the "author_id" field.
func AuthorIDHasPrefix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasPrefix(FieldAuthorID, v))
}

// AuthorIDHasSuffix applies the HasSuffix predicate on the "author_id" field.
func AuthorIDHasSuffix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasSuffix(FieldAuthorID, v))
}

// AuthorIDEqualFold applies the EqualFold predicate on the "author_id" field.
func AuthorIDEqualFold(v string) predicate.Author {
	return predicate.Author(sql.FieldEqualFold(FieldAuthorID, v))
}

// AuthorIDContainsFold applies the ContainsFold predicate on the "author_id" field.
func AuthorIDContainsFold(v string) predicate.Author {
	return predicate.Author(sql.FieldContainsFold(FieldAuthorID, v))
}

// LastSeenEQ applies the EQ predicate on the "last_seen" field.
func LastSeenEQ(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldLastSeen, v))
}

// LastSeenNEQ applies the NEQ predicate on the "last_seen" field.
func LastSeenNEQ(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldLastSeen, v))
}

// LastSeenIn applies the In predicate on the "last_seen" field.
func LastSeenIn(vs ...time.Time) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldLastSeen, vs...))
}

// LastSeenNotIn applies the NotIn predicate on the "last_seen" field.
func LastSeenNotIn(vs ...time.Time) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldLastSeen, vs...))
}

// LastSeenGT applies the GT predicate on the "last_seen" field.
func LastSeenGT(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldLastSeen, v))
}

// LastSeenGTE applies the GTE predicate on the "last_seen" field.
func LastSeenGTE(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldLastSeen, v))
}

// LastSeenLT applies the LT predicate on the "last_seen" field.
func LastSeenLT(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldLastSeen, v))
}

// LastSeenLTE applies the LTE predicate on the "last_seen" field.
func LastSeenLTE(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldLastSeen, v))
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Author {
	return predicate.Author(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Author {
	return predicate.Author(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Author) predicate.Author {
	return predicate.Author(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Author) predicate.Author {
	return predicate.Author(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Author) predicate.Author {
	return predicate.Author(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/app/ent/message"
	"github.com/patyhank/ptd/app/ent/postinfo"
	"github.com/patyhank/ptd/app/ent/predicate"
)

// PostInfoUpdate is the builder for updating PostInfo entities.
type PostInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PostInfoMutation
}

// Where appends a list predicates to the PostInfoUpdate builder.
func (piu *PostInfoUpdate) Where(ps ...predicate.PostInfo) *PostInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetTitle sets the "title" field.
func (piu *PostInfoUpdate) SetTitle(s string) *PostInfoUpdate {
	piu.mutation.SetTitle(s)
	return piu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableTitle(s *string) *PostInfoUpdate {
	if s != nil {
		piu.SetTitle(*s)
	}
	return piu
}

// ClearTitle clears the value of the "title" field.
func (piu *PostInfoUpdate) ClearTitle() *PostInfoUpdate {
	piu.mutation.ClearTitle()
	return piu
}

// SetLastUpdated sets the "last_updated" field.
func (piu *PostInfoUpdate) SetLastUpdated(t time.Time) *PostInfoUpdate {
	piu.mutation.SetLastUpdated(t)
	return piu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableLastUpdated(t *time.Time) *PostInfoUpdate {
	if t != nil {
		piu.SetLastUpdated(*t)
	}
	return piu
}

// SetCurrentViewing sets the "current_viewing" field.
func (piu *PostInfoUpdate) SetCurrentViewing(b bool) *PostInfoUpdate {
	piu.mutation.SetCurrentViewing(b)
	return piu
}

// SetNillableCurrentViewing sets the "current_viewing" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableCurrentViewing(b *bool) *PostInfoUpdate {
	if b != nil {
		piu.SetCurrentViewing(*b)
	}
	return piu
}

// SetSearchKeywords sets the "search_keywords" field.
func (piu *PostInfoUpdate) SetSearchKeywords(s []string) *PostInfoUpdate {
	piu.mutation.SetSearchKeywords(s)
	return piu
}

// AppendSearchKeywords appends s to the "search_keywords" field.
func (piu *PostInfoUpdate) AppendSearchKeywords(s []string) *PostInfoUpdate {
	piu.mutation.AppendSearchKeywords(s)
	return piu
}

// ClearSearchKeywords clears the value of the "search_keywords" field.
func (piu *PostInfoUpdate) ClearSearchKeywords() *PostInfoUpdate {
	piu.mutation.ClearSearchKeywords()
	return piu
}

// SetForceViewExpire sets the "force_view_expire" field.
func (piu *PostInfoUpdate) SetForceViewExpire(t time.Time) *PostInfoUpdate {
	piu.mutation.SetForceViewExpire(t)
	return piu
}

// SetNillableForceViewExpire sets the "force_view_expire" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableForceViewExpire(t *time.Time) *PostInfoUpdate {
	if t != nil {
		piu.SetForceViewExpire(*t)
	}
	return piu
}

// ClearForceViewExpire clears the value of the "force_view_expire" field.
func (piu *PostInfoUpdate) ClearForceViewExpire() *PostInfoUpdate {
	piu.mutation.ClearForceViewExpire()
	return piu
}

// SetShouldArchived sets the "should_archived" field.
func (piu *PostInfoUpdate) SetShouldArchived(b bool) *PostInfoUpdate {
	piu.mutation.SetShouldArchived(b)
	return piu
}

// SetNillableShouldArchived sets the "should_archived" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableShouldArchived(b *bool) *PostInfoUpdate {
	if b != nil {
		piu.SetShouldArchived(*b)
	}
	return piu
}

// SetAid sets the "aid" field.
func (piu *PostInfoUpdate) SetAid(s string) *PostInfoUpdate {
	piu.mutation.SetAid(s)
	return piu
}

// SetNillableAid sets the "aid" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableAid(s *string) *PostInfoUpdate {
	if s != nil {
		piu.SetAid(*s)
	}
	return piu
}

// ClearAid clears the value of the "aid" field.
func (piu *PostInfoUpdate) ClearAid() *PostInfoUpdate {
	piu.mutation.ClearAid()
	return piu
}

// SetURL sets the "url" field.
func (piu *PostInfoUpdate) SetURL(s string) *PostInfoUpdate {
	piu.mutation.SetURL(s)
	return piu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableURL(s *string) *PostInfoUpdate {
	if s != nil {
		piu.SetURL(*s)
	}
	return piu
}

// ClearURL clears the value of the "url" field.
func (piu *PostInfoUpdate) ClearURL() *PostInfoUpdate {
	piu.mutation.ClearURL()
	return piu
}

// SetPostContent sets the "post_content" field.
func (piu *PostInfoUpdate) SetPostContent(s string) *PostInfoUpdate {
	piu.mutation.SetPostContent(s)
	return piu
}

// SetNillablePostContent sets the "post_content" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillablePostContent(s *string) *PostInfoUpdate {
	if s != nil {
		piu.SetPostContent(*s)
	}
	return piu
}

// ClearPostContent clears the value of the "post_content" field.
func (piu *PostInfoUpdate) ClearPostContent() *PostInfoUpdate {
	piu.mutation.ClearPostContent()
	return piu
}

// SetContentMessages sets the "content_messages" field.
func (piu *PostInfoUpdate) SetContentMessages(s []snowflake.ID) *PostInfoUpdate {
	piu.mutation.SetContentMessages(s)
	return piu
}

// AppendContentMessages appends s to the "content_messages" field.
func (piu *PostInfoUpdate) AppendContentMessages(s []snowflake.ID) *PostInfoUpdate {
	piu.mutation.AppendContentMessages(s)
	return piu
}

// ClearContentMessages clears the value of the "content_messages" field.
func (piu *PostInfoUpdate) ClearContentMessages() *PostInfoUpdate {
	piu.mutation.ClearContentMessages()
	return piu
}

// SetChannelID sets the "channel_id" field.
func (piu *PostInfoUpdate) SetChannelID(s snowflake.ID) *PostInfoUpdate {
	piu.mutation.ResetChannelID()
	piu.mutation.SetChannelID(s)
	return piu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (piu *PostInfoUpdate) SetNillableChannelID(s *snowflake.ID) *PostInfoUpdate {
	if s != nil {
		piu.SetChannelID(*s)
	}
	return piu
}

// AddChannelID adds s to the "channel_id" field.
func (piu *PostInfoUpdate) AddChannelID(s snowflake.ID) *PostInfoUpdate {
	piu.mutation.AddChannelID(s)
	return piu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (piu *PostInfoUpdate) AddMessageIDs(ids ...int) *PostInfoUpdate {
	piu.mutation.AddMessageIDs(ids...)
	return piu
}

// AddMessages adds the "messages" edges to the Message entity.
func (piu *PostInfoUpdate) AddMessages(m ...*Message) *PostInfoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piu.AddMessageIDs(ids...)
}

// Mutation returns the PostInfoMutation object of the builder.
func (piu *PostInfoUpdate) Mutation() *PostInfoMutation {
	return piu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (piu *PostInfoUpdate) ClearMessages() *PostInfoUpdate {
	piu.mutation.ClearMessages()
	return piu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (piu *PostInfoUpdate) RemoveMessageIDs(ids ...int) *PostInfoUpdate {
	piu.mutation.RemoveMessageIDs(ids...)
	return piu
}

// RemoveMessages removes "messages" edges to Message entities.
func (piu *PostInfoUpdate) RemoveMessages(m ...*Message) *PostInfoUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PostInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PostInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PostInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PostInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PostInfoUpdate) check() error {
	if v, ok := piu.mutation.ChannelID(); ok {
		if err := postinfo.ChannelIDValidator(uint64(v)); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PostInfo.channel_id": %w`, err)}
		}
	}
	return nil
}

func (piu *PostInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postinfo.Table, postinfo.Columns, sqlgraph.NewFieldSpec(postinfo.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Title(); ok {
		_spec.SetField(postinfo.FieldTitle, field.TypeString, value)
	}
	if piu.mutation.TitleCleared() {
		_spec.ClearField(postinfo.FieldTitle, field.TypeString)
	}
	if value, ok := piu.mutation.LastUpdated(); ok {
		_spec.SetField(postinfo.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := piu.mutation.CurrentViewing(); ok {
		_spec.SetField(postinfo.FieldCurrentViewing, field.TypeBool, value)
	}
	if value, ok := piu.mutation.SearchKeywords(); ok {
		_spec.SetField(postinfo.FieldSearchKeywords, field.TypeJSON, value)
	}
	if value, ok := piu.mutation.AppendedSearchKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postinfo.FieldSearchKeywords, value)
		})
	}
	if piu.mutation.SearchKeywordsCleared() {
		_spec.ClearField(postinfo.FieldSearchKeywords, field.TypeJSON)
	}
	if value, ok := piu.mutation.ForceViewExpire(); ok {
		_spec.SetField(postinfo.FieldForceViewExpire, field.TypeTime, value)
	}
	if piu.mutation.ForceViewExpireCleared() {
		_spec.ClearField(postinfo.FieldForceViewExpire, field.TypeTime)
	}
	if value, ok := piu.mutation.ShouldArchived(); ok {
		_spec.SetField(postinfo.FieldShouldArchived, field.TypeBool, value)
	}
	if value, ok := piu.mutation.Aid(); ok {
		_spec.SetField(postinfo.FieldAid, field.TypeString, value)
	}
	if piu.mutation.AidCleared() {
		_spec.ClearField(postinfo.FieldAid, field.TypeString)
	}
	if value, ok := piu.mutation.URL(); ok {
		_spec.SetField(postinfo.FieldURL, field.TypeString, value)
	}
	if piu.mutation.URLCleared() {
		_spec.ClearField(postinfo.FieldURL, field.TypeString)
	}
	if value, ok := piu.mutation.PostContent(); ok {
		_spec.SetField(postinfo.FieldPostContent, field.TypeString, value)
	}
	if piu.mutation.PostContentCleared() {
		_spec.ClearField(postinfo.FieldPostContent, field.TypeString)
	}
	if value, ok := piu.mutation.ContentMessages(); ok {
		_spec.SetField(postinfo.FieldContentMessages, field.TypeJSON, value)
	}
	if value, ok := piu.mutation.AppendedContentMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postinfo.FieldContentMessages, value)
		})
	}
	if piu.mutation.ContentMessagesCleared() {
		_spec.ClearField(postinfo.FieldContentMessages, field.TypeJSON)
	}
	if value, ok := piu.mutation.ChannelID(); ok {
		_spec.SetField(postinfo.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := piu.mutation.AddedChannelID(); ok {
		_spec.AddField(postinfo.FieldChannelID, field.TypeUint64, value)
	}
	if piu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !piu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PostInfoUpdateOne is the builder for updating a single PostInfo entity.
type PostInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostInfoMutation
}

// SetTitle sets the "title" field.
func (piuo *PostInfoUpdateOne) SetTitle(s string) *PostInfoUpdateOne {
	piuo.mutation.SetTitle(s)
	return piuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableTitle(s *string) *PostInfoUpdateOne {
	if s != nil {
		piuo.SetTitle(*s)
	}
	return piuo
}

// ClearTitle clears the value of the "title" field.
func (piuo *PostInfoUpdateOne) ClearTitle() *PostInfoUpdateOne {
	piuo.mutation.ClearTitle()
	return piuo
}

// SetLastUpdated sets the "last_updated" field.
func (piuo *PostInfoUpdateOne) SetLastUpdated(t time.Time) *PostInfoUpdateOne {
	piuo.mutation.SetLastUpdated(t)
	return piuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableLastUpdated(t *time.Time) *PostInfoUpdateOne {
	if t != nil {
		piuo.SetLastUpdated(*t)
	}
	return piuo
}

// SetCurrentViewing sets the "current_viewing" field.
func (piuo *PostInfoUpdateOne) SetCurrentViewing(b bool) *PostInfoUpdateOne {
	piuo.mutation.SetCurrentViewing(b)
	return piuo
}

// SetNillableCurrentViewing sets the "current_viewing" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableCurrentViewing(b *bool) *PostInfoUpdateOne {
	if b != nil {
		piuo.SetCurrentViewing(*b)
	}
	return piuo
}

// SetSearchKeywords sets the "search_keywords" field.
func (piuo *PostInfoUpdateOne) SetSearchKeywords(s []string) *PostInfoUpdateOne {
	piuo.mutation.SetSearchKeywords(s)
	return piuo
}

// AppendSearchKeywords appends s to the "search_keywords" field.
func (piuo *PostInfoUpdateOne) AppendSearchKeywords(s []string) *PostInfoUpdateOne {
	piuo.mutation.AppendSearchKeywords(s)
	return piuo
}

// ClearSearchKeywords clears the value of the "search_keywords" field.
func (piuo *PostInfoUpdateOne) ClearSearchKeywords() *PostInfoUpdateOne {
	piuo.mutation.ClearSearchKeywords()
	return piuo
}

// SetForceViewExpire sets the "force_view_expire" field.
func (piuo *PostInfoUpdateOne) SetForceViewExpire(t time.Time) *PostInfoUpdateOne {
	piuo.mutation.SetForceViewExpire(t)
	return piuo
}

// SetNillableForceViewExpire sets the "force_view_expire" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableForceViewExpire(t *time.Time) *PostInfoUpdateOne {
	if t != nil {
		piuo.SetForceViewExpire(*t)
	}
	return piuo
}

// ClearForceViewExpire clears the value of the "force_view_expire" field.
func (piuo *PostInfoUpdateOne) ClearForceViewExpire() *PostInfoUpdateOne {
	piuo.mutation.ClearForceViewExpire()
	return piuo
}

// SetShouldArchived sets the "should_archived" field.
func (piuo *PostInfoUpdateOne) SetShouldArchived(b bool) *PostInfoUpdateOne {
	piuo.mutation.SetShouldArchived(b)
	return piuo
}

// SetNillableShouldArchived sets the "should_archived" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableShouldArchived(b *bool) *PostInfoUpdateOne {
	if b != nil {
		piuo.SetShouldArchived(*b)
	}
	return piuo
}

// SetAid sets the "aid" field.
func (piuo *PostInfoUpdateOne) SetAid(s string) *PostInfoUpdateOne {
	piuo.mutation.SetAid(s)
	return piuo
}

// SetNillableAid sets the "aid" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableAid(s *string) *PostInfoUpdateOne {
	if s != nil {
		piuo.SetAid(*s)
	}
	return piuo
}

// ClearAid clears the value of the "aid" field.
func (piuo *PostInfoUpdateOne) ClearAid() *PostInfoUpdateOne {
	piuo.mutation.ClearAid()
	return piuo
}

// SetURL sets the "url" field.
func (piuo *PostInfoUpdateOne) SetURL(s string) *PostInfoUpdateOne {
	piuo.mutation.SetURL(s)
	return piuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableURL(s *string) *PostInfoUpdateOne {
	if s != nil {
		piuo.SetURL(*s)
	}
	return piuo
}

// ClearURL clears the value of the "url" field.
func (piuo *PostInfoUpdateOne) ClearURL() *PostInfoUpdateOne {
	piuo.mutation.ClearURL()
	return piuo
}

// SetPostContent sets the "post_content" field.
func (piuo *PostInfoUpdateOne) SetPostContent(s string) *PostInfoUpdateOne {
	piuo.mutation.SetPostContent(s)
	return piuo
}

// SetNillablePostContent sets the "post_content" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillablePostContent(s *string) *PostInfoUpdateOne {
	if s != nil {
		piuo.SetPostContent(*s)
	}
	return piuo
}

// ClearPostContent clears the value of the "post_content" field.
func (piuo *PostInfoUpdateOne) ClearPostContent() *PostInfoUpdateOne {
	piuo.mutation.ClearPostContent()
	return piuo
}

// SetContentMessages sets the "content_messages" field.
func (piuo *PostInfoUpdateOne) SetContentMessages(s []snowflake.ID) *PostInfoUpdateOne {
	piuo.mutation.SetContentMessages(s)
	return piuo
}

// AppendContentMessages appends s to the "content_messages" field.
func (piuo *PostInfoUpdateOne) AppendContentMessages(s []snowflake.ID) *PostInfoUpdateOne {
	piuo.mutation.AppendContentMessages(s)
	return piuo
}

// ClearContentMessages clears the value of the "content_messages" field.
func (piuo *PostInfoUpdateOne) ClearContentMessages() *PostInfoUpdateOne {
	piuo.mutation.ClearContentMessages()
	return piuo
}

// SetChannelID sets the "channel_id" field.
func (piuo *PostInfoUpdateOne) SetChannelID(s snowflake.ID) *PostInfoUpdateOne {
	piuo.mutation.ResetChannelID()
	piuo.mutation.SetChannelID(s)
	return piuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (piuo *PostInfoUpdateOne) SetNillableChannelID(s *snowflake.ID) *PostInfoUpdateOne {
	if s != nil {
		piuo.SetChannelID(*s)
	}
	return piuo
}

// AddChannelID adds s to the "channel_id" field.
func (piuo *PostInfoUpdateOne) AddChannelID(s snowflake.ID) *PostInfoUpdateOne {
	piuo.mutation.AddChannelID(s)
	return piuo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (piuo *PostInfoUpdateOne) AddMessageIDs(ids ...int) *PostInfoUpdateOne {
	piuo.mutation.AddMessageIDs(ids...)
	return piuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (piuo *PostInfoUpdateOne) AddMessages(m ...*Message) *PostInfoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piuo.AddMessageIDs(ids...)
}

// Mutation returns the PostInfoMutation object of the builder.
func (piuo *PostInfoUpdateOne) Mutation() *PostInfoMutation {
	return piuo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (piuo *PostInfoUpdateOne) ClearMessages() *PostInfoUpdateOne {
	piuo.mutation.ClearMessages()
	return piuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (piuo *PostInfoUpdateOne) RemoveMessageIDs(ids ...int) *PostInfoUpdateOne {
	piuo.mutation.RemoveMessageIDs(ids...)
	return piuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (piuo *PostInfoUpdateOne) RemoveMessages(m ...*Message) *PostInfoUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the PostInfoUpdate builder.
func (piuo *PostInfoUpdateOne) Where(ps ...predicate.PostInfo) *PostInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PostInfoUpdateOne) Select(field string, fields ...string) *PostInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PostInfo entity.
func (piuo *PostInfoUpdateOne) Save(ctx context.Context) (*PostInfo, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PostInfoUpdateOne) SaveX(ctx context.Context) *PostInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PostInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PostInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PostInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.ChannelID(); ok {
		if err := postinfo.ChannelIDValidator(uint64(v)); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "PostInfo.channel_id": %w`, err)}
		}
	}
	return nil
}

func (piuo *PostInfoUpdateOne) sqlSave(ctx context.Context) (_node *PostInfo, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postinfo.Table, postinfo.Columns, sqlgraph.NewFieldSpec(postinfo.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postinfo.FieldID)
		for _, f := range fields {
			if !postinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Title(); ok {
		_spec.SetField(postinfo.FieldTitle, field.TypeString, value)
	}
	if piuo.mutation.TitleCleared() {
		_spec.ClearField(postinfo.FieldTitle, field.TypeString)
	}
	if value, ok := piuo.mutation.LastUpdated(); ok {
		_spec.SetField(postinfo.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.CurrentViewing(); ok {
		_spec.SetField(postinfo.FieldCurrentViewing, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.SearchKeywords(); ok {
		_spec.SetField(postinfo.FieldSearchKeywords, field.TypeJSON, value)
	}
	if value, ok := piuo.mutation.AppendedSearchKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postinfo.FieldSearchKeywords, value)
		})
	}
	if piuo.mutation.SearchKeywordsCleared() {
		_spec.ClearField(postinfo.FieldSearchKeywords, field.TypeJSON)
	}
	if value, ok := piuo.mutation.ForceViewExpire(); ok {
		_spec.SetField(postinfo.FieldForceViewExpire, field.TypeTime, value)
	}
	if piuo.mutation.ForceViewExpireCleared() {
		_spec.ClearField(postinfo.FieldForceViewExpire, field.TypeTime)
	}
	if value, ok := piuo.mutation.ShouldArchived(); ok {
		_spec.SetField(postinfo.FieldShouldArchived, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.Aid(); ok {
		_spec.SetField(postinfo.FieldAid, field.TypeString, value)
	}
	if piuo.mutation.AidCleared() {
		_spec.ClearField(postinfo.FieldAid, field.TypeString)
	}
	if value, ok := piuo.mutation.URL(); ok {
		_spec.SetField(postinfo.FieldURL, field.TypeString, value)
	}
	if piuo.mutation.URLCleared() {
		_spec.ClearField(postinfo.FieldURL, field.TypeString)
	}
	if value, ok := piuo.mutation.PostContent(); ok {
		_spec.SetField(postinfo.FieldPostContent, field.TypeString, value)
	}
	if piuo.mutation.PostContentCleared() {
		_spec.ClearField(postinfo.FieldPostContent, field.TypeString)
	}
	if value, ok := piuo.mutation.ContentMessages(); ok {
		_spec.SetField(postinfo.FieldContentMessages, field.TypeJSON, value)
	}
	if value, ok := piuo.mutation.AppendedContentMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postinfo.FieldContentMessages, value)
		})
	}
	if piuo.mutation.ContentMessagesCleared() {
		_spec.ClearField(postinfo.FieldContentMessages, field.TypeJSON)
	}
	if value, ok := piuo.mutation.ChannelID(); ok {
		_spec.SetField(postinfo.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := piuo.mutation.AddedChannelID(); ok {
		_spec.AddField(postinfo.FieldChannelID, field.TypeUint64, value)
	}
	if piuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !piuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postinfo.MessagesTable,
			Columns: []string{postinfo.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PostInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}

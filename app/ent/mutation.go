// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/patyhank/ptd/app/ent/author"
	"github.com/patyhank/ptd/app/ent/message"
	"github.com/patyhank/ptd/app/ent/postinfo"
	"github.com/patyhank/ptd/app/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuthor   = "Author"
	TypeMessage  = "Message"
	TypePostInfo = "PostInfo"
)

// AuthorMutation represents an operation that mutates the Author nodes in the graph.
type AuthorMutation struct {
	config
	op              Op
	typ             string
	id              *int
	author_id       *string
	last_seen       *time.Time
	clearedFields   map[string]struct{}
	messages        map[int]struct{}
	removedmessages map[int]struct{}
	clearedmessages bool
	done            bool
	oldValue        func(context.Context) (*Author, error)
	predicates      []predicate.Author
}

var _ ent.Mutation = (*AuthorMutation)(nil)

// authorOption allows management of the mutation configuration using functional options.
type authorOption func(*AuthorMutation)

// newAuthorMutation creates new mutation for the Author entity.
func newAuthorMutation(c config, op Op, opts ...authorOption) *AuthorMutation {
	m := &AuthorMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorID sets the ID field of the mutation.
func withAuthorID(id int) authorOption {
	return func(m *AuthorMutation) {
		var (
			err   error
			once  sync.Once
			value *Author
		)
		m.oldValue = func(ctx context.Context) (*Author, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Author.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthor sets the old Author of the mutation.
func withAuthor(node *Author) authorOption {
	return func(m *AuthorMutation) {
		m.oldValue = func(context.Context) (*Author, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Author.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAuthorID sets the "author_id" field.
func (m *AuthorMutation) SetAuthorID(s string) {
	m.author_id = &s
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *AuthorMutation) AuthorID() (r string, exists bool) {
	v := m.author_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Author entity.
// If the Author object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorMutation) OldAuthorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *AuthorMutation) ResetAuthorID() {
	m.author_id = nil
}

// SetLastSeen sets the "last_seen" field.
func (m *AuthorMutation) SetLastSeen(t time.Time) {
	m.last_seen = &t
}

// LastSeen returns the value of the "last_seen" field in the mutation.
func (m *AuthorMutation) LastSeen() (r time.Time, exists bool) {
	v := m.last_seen
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeen returns the old "last_seen" field's value of the Author entity.
// If the Author object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorMutation) OldLastSeen(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSeen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeen: %w", err)
	}
	return oldValue.LastSeen, nil
}

// ResetLastSeen resets all changes to the "last_seen" field.
func (m *AuthorMutation) ResetLastSeen() {
	m.last_seen = nil
}

// AddMessageIDs adds the "messages" edge to the Message entity by ids.
func (m *AuthorMutation) AddMessageIDs(ids ...int) {
	if m.messages == nil {
		m.messages = make(map[int]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Message entity.
func (m *AuthorMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the Message entity was cleared.
func (m *AuthorMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Message entity by IDs.
func (m *AuthorMutation) RemoveMessageIDs(ids ...int) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Message entity.
func (m *AuthorMutation) RemovedMessagesIDs() (ids []int) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *AuthorMutation) MessagesIDs() (ids []int) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *AuthorMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Where appends a list predicates to the AuthorMutation builder.
func (m *AuthorMutation) Where(ps ...predicate.Author) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Author, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Author).
func (m *AuthorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.author_id != nil {
		fields = append(fields, author.FieldAuthorID)
	}
	if m.last_seen != nil {
		fields = append(fields, author.FieldLastSeen)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case author.FieldAuthorID:
		return m.AuthorID()
	case author.FieldLastSeen:
		return m.LastSeen()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case author.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case author.FieldLastSeen:
		return m.OldLastSeen(ctx)
	}
	return nil, fmt.Errorf("unknown Author field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case author.FieldAuthorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case author.FieldLastSeen:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeen(v)
		return nil
	}
	return fmt.Errorf("unknown Author field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Author numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Author nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthorMutation) ResetField(name string) error {
	switch name {
	case author.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case author.FieldLastSeen:
		m.ResetLastSeen()
		return nil
	}
	return fmt.Errorf("unknown Author field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.messages != nil {
		edges = append(edges, author.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case author.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmessages != nil {
		edges = append(edges, author.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case author.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessages {
		edges = append(edges, author.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthorMutation) EdgeCleared(name string) bool {
	switch name {
	case author.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Author unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthorMutation) ResetEdge(name string) error {
	switch name {
	case author.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown Author edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	hash               *string
	content            *string
	raw_content        *string
	created_at         *time.Time
	message_id         *snowflake.ID
	addmessage_id      *snowflake.ID
	clearedFields      map[string]struct{}
	author             *int
	clearedauthor      bool
	parent_post        *int
	clearedparent_post bool
	done               bool
	oldValue           func(context.Context) (*Message, error)
	predicates         []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *MessageMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *MessageMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *MessageMutation) ResetHash() {
	m.hash = nil
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
}

// SetRawContent sets the "raw_content" field.
func (m *MessageMutation) SetRawContent(s string) {
	m.raw_content = &s
}

// RawContent returns the value of the "raw_content" field in the mutation.
func (m *MessageMutation) RawContent() (r string, exists bool) {
	v := m.raw_content
	if v == nil {
		return
	}
	return *v, true
}

// OldRawContent returns the old "raw_content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldRawContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawContent: %w", err)
	}
	return oldValue.RawContent, nil
}

// ResetRawContent resets all changes to the "raw_content" field.
func (m *MessageMutation) ResetRawContent() {
	m.raw_content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMessageID sets the "message_id" field.
func (m *MessageMutation) SetMessageID(s snowflake.ID) {
	m.message_id = &s
	m.addmessage_id = nil
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *MessageMutation) MessageID() (r snowflake.ID, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMessageID(ctx context.Context) (v snowflake.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// AddMessageID adds s to the "message_id" field.
func (m *MessageMutation) AddMessageID(s snowflake.ID) {
	if m.addmessage_id != nil {
		*m.addmessage_id += s
	} else {
		m.addmessage_id = &s
	}
}

// AddedMessageID returns the value that was added to the "message_id" field in this mutation.
func (m *MessageMutation) AddedMessageID() (r snowflake.ID, exists bool) {
	v := m.addmessage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *MessageMutation) ResetMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
}

// SetAuthorID sets the "author" edge to the Author entity by id.
func (m *MessageMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the Author entity.
func (m *MessageMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the Author entity was cleared.
func (m *MessageMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *MessageMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *MessageMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetParentPostID sets the "parent_post" edge to the PostInfo entity by id.
func (m *MessageMutation) SetParentPostID(id int) {
	m.parent_post = &id
}

// ClearParentPost clears the "parent_post" edge to the PostInfo entity.
func (m *MessageMutation) ClearParentPost() {
	m.clearedparent_post = true
}

// ParentPostCleared reports if the "parent_post" edge to the PostInfo entity was cleared.
func (m *MessageMutation) ParentPostCleared() bool {
	return m.clearedparent_post
}

// ParentPostID returns the "parent_post" edge ID in the mutation.
func (m *MessageMutation) ParentPostID() (id int, exists bool) {
	if m.parent_post != nil {
		return *m.parent_post, true
	}
	return
}

// ParentPostIDs returns the "parent_post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentPostID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ParentPostIDs() (ids []int) {
	if id := m.parent_post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentPost resets all changes to the "parent_post" edge.
func (m *MessageMutation) ResetParentPost() {
	m.parent_post = nil
	m.clearedparent_post = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.hash != nil {
		fields = append(fields, message.FieldHash)
	}
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.raw_content != nil {
		fields = append(fields, message.FieldRawContent)
	}
	if m.created_at != nil {
		fields = append(fields, message.FieldCreatedAt)
	}
	if m.message_id != nil {
		fields = append(fields, message.FieldMessageID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldHash:
		return m.Hash()
	case message.FieldContent:
		return m.Content()
	case message.FieldRawContent:
		return m.RawContent()
	case message.FieldCreatedAt:
		return m.CreatedAt()
	case message.FieldMessageID:
		return m.MessageID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldHash:
		return m.OldHash(ctx)
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldRawContent:
		return m.OldRawContent(ctx)
	case message.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case message.FieldMessageID:
		return m.OldMessageID(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldRawContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawContent(v)
		return nil
	case message.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case message.FieldMessageID:
		v, ok := value.(snowflake.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.addmessage_id != nil {
		fields = append(fields, message.FieldMessageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldMessageID:
		return m.AddedMessageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldMessageID:
		v, ok := value.(snowflake.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldHash:
		m.ResetHash()
		return nil
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldRawContent:
		m.ResetRawContent()
		return nil
	case message.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case message.FieldMessageID:
		m.ResetMessageID()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, message.EdgeAuthor)
	}
	if m.parent_post != nil {
		edges = append(edges, message.EdgeParentPost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeParentPost:
		if id := m.parent_post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, message.EdgeAuthor)
	}
	if m.clearedparent_post {
		edges = append(edges, message.EdgeParentPost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeAuthor:
		return m.clearedauthor
	case message.EdgeParentPost:
		return m.clearedparent_post
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case message.EdgeParentPost:
		m.ClearParentPost()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case message.EdgeParentPost:
		m.ResetParentPost()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// PostInfoMutation represents an operation that mutates the PostInfo nodes in the graph.
type PostInfoMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	title                  *string
	last_updated           *time.Time
	current_viewing        *bool
	force_view_expire      *time.Time
	should_archived        *bool
	aid                    *string
	url                    *string
	post_content           *string
	content_messages       *[]snowflake.ID
	appendcontent_messages []snowflake.ID
	channel_id             *snowflake.ID
	addchannel_id          *snowflake.ID
	clearedFields          map[string]struct{}
	messages               map[int]struct{}
	removedmessages        map[int]struct{}
	clearedmessages        bool
	done                   bool
	oldValue               func(context.Context) (*PostInfo, error)
	predicates             []predicate.PostInfo
}

var _ ent.Mutation = (*PostInfoMutation)(nil)

// postinfoOption allows management of the mutation configuration using functional options.
type postinfoOption func(*PostInfoMutation)

// newPostInfoMutation creates new mutation for the PostInfo entity.
func newPostInfoMutation(c config, op Op, opts ...postinfoOption) *PostInfoMutation {
	m := &PostInfoMutation{
		config:        c,
		op:            op,
		typ:           TypePostInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostInfoID sets the ID field of the mutation.
func withPostInfoID(id int) postinfoOption {
	return func(m *PostInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *PostInfo
		)
		m.oldValue = func(ctx context.Context) (*PostInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PostInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPostInfo sets the old PostInfo of the mutation.
func withPostInfo(node *PostInfo) postinfoOption {
	return func(m *PostInfoMutation) {
		m.oldValue = func(context.Context) (*PostInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PostInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *PostInfoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PostInfoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PostInfoMutation) ResetTitle() {
	m.title = nil
}

// SetLastUpdated sets the "last_updated" field.
func (m *PostInfoMutation) SetLastUpdated(t time.Time) {
	m.last_updated = &t
}

// LastUpdated returns the value of the "last_updated" field in the mutation.
func (m *PostInfoMutation) LastUpdated() (r time.Time, exists bool) {
	v := m.last_updated
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdated returns the old "last_updated" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldLastUpdated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdated: %w", err)
	}
	return oldValue.LastUpdated, nil
}

// ResetLastUpdated resets all changes to the "last_updated" field.
func (m *PostInfoMutation) ResetLastUpdated() {
	m.last_updated = nil
}

// SetCurrentViewing sets the "current_viewing" field.
func (m *PostInfoMutation) SetCurrentViewing(b bool) {
	m.current_viewing = &b
}

// CurrentViewing returns the value of the "current_viewing" field in the mutation.
func (m *PostInfoMutation) CurrentViewing() (r bool, exists bool) {
	v := m.current_viewing
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentViewing returns the old "current_viewing" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldCurrentViewing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentViewing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentViewing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentViewing: %w", err)
	}
	return oldValue.CurrentViewing, nil
}

// ResetCurrentViewing resets all changes to the "current_viewing" field.
func (m *PostInfoMutation) ResetCurrentViewing() {
	m.current_viewing = nil
}

// SetForceViewExpire sets the "force_view_expire" field.
func (m *PostInfoMutation) SetForceViewExpire(t time.Time) {
	m.force_view_expire = &t
}

// ForceViewExpire returns the value of the "force_view_expire" field in the mutation.
func (m *PostInfoMutation) ForceViewExpire() (r time.Time, exists bool) {
	v := m.force_view_expire
	if v == nil {
		return
	}
	return *v, true
}

// OldForceViewExpire returns the old "force_view_expire" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldForceViewExpire(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForceViewExpire is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForceViewExpire requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForceViewExpire: %w", err)
	}
	return oldValue.ForceViewExpire, nil
}

// ClearForceViewExpire clears the value of the "force_view_expire" field.
func (m *PostInfoMutation) ClearForceViewExpire() {
	m.force_view_expire = nil
	m.clearedFields[postinfo.FieldForceViewExpire] = struct{}{}
}

// ForceViewExpireCleared returns if the "force_view_expire" field was cleared in this mutation.
func (m *PostInfoMutation) ForceViewExpireCleared() bool {
	_, ok := m.clearedFields[postinfo.FieldForceViewExpire]
	return ok
}

// ResetForceViewExpire resets all changes to the "force_view_expire" field.
func (m *PostInfoMutation) ResetForceViewExpire() {
	m.force_view_expire = nil
	delete(m.clearedFields, postinfo.FieldForceViewExpire)
}

// SetShouldArchived sets the "should_archived" field.
func (m *PostInfoMutation) SetShouldArchived(b bool) {
	m.should_archived = &b
}

// ShouldArchived returns the value of the "should_archived" field in the mutation.
func (m *PostInfoMutation) ShouldArchived() (r bool, exists bool) {
	v := m.should_archived
	if v == nil {
		return
	}
	return *v, true
}

// OldShouldArchived returns the old "should_archived" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldShouldArchived(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShouldArchived is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShouldArchived requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShouldArchived: %w", err)
	}
	return oldValue.ShouldArchived, nil
}

// ResetShouldArchived resets all changes to the "should_archived" field.
func (m *PostInfoMutation) ResetShouldArchived() {
	m.should_archived = nil
}

// SetAid sets the "aid" field.
func (m *PostInfoMutation) SetAid(s string) {
	m.aid = &s
}

// Aid returns the value of the "aid" field in the mutation.
func (m *PostInfoMutation) Aid() (r string, exists bool) {
	v := m.aid
	if v == nil {
		return
	}
	return *v, true
}

// OldAid returns the old "aid" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldAid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAid: %w", err)
	}
	return oldValue.Aid, nil
}

// ClearAid clears the value of the "aid" field.
func (m *PostInfoMutation) ClearAid() {
	m.aid = nil
	m.clearedFields[postinfo.FieldAid] = struct{}{}
}

// AidCleared returns if the "aid" field was cleared in this mutation.
func (m *PostInfoMutation) AidCleared() bool {
	_, ok := m.clearedFields[postinfo.FieldAid]
	return ok
}

// ResetAid resets all changes to the "aid" field.
func (m *PostInfoMutation) ResetAid() {
	m.aid = nil
	delete(m.clearedFields, postinfo.FieldAid)
}

// SetURL sets the "url" field.
func (m *PostInfoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *PostInfoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *PostInfoMutation) ClearURL() {
	m.url = nil
	m.clearedFields[postinfo.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *PostInfoMutation) URLCleared() bool {
	_, ok := m.clearedFields[postinfo.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *PostInfoMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, postinfo.FieldURL)
}

// SetPostContent sets the "post_content" field.
func (m *PostInfoMutation) SetPostContent(s string) {
	m.post_content = &s
}

// PostContent returns the value of the "post_content" field in the mutation.
func (m *PostInfoMutation) PostContent() (r string, exists bool) {
	v := m.post_content
	if v == nil {
		return
	}
	return *v, true
}

// OldPostContent returns the old "post_content" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldPostContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostContent: %w", err)
	}
	return oldValue.PostContent, nil
}

// ClearPostContent clears the value of the "post_content" field.
func (m *PostInfoMutation) ClearPostContent() {
	m.post_content = nil
	m.clearedFields[postinfo.FieldPostContent] = struct{}{}
}

// PostContentCleared returns if the "post_content" field was cleared in this mutation.
func (m *PostInfoMutation) PostContentCleared() bool {
	_, ok := m.clearedFields[postinfo.FieldPostContent]
	return ok
}

// ResetPostContent resets all changes to the "post_content" field.
func (m *PostInfoMutation) ResetPostContent() {
	m.post_content = nil
	delete(m.clearedFields, postinfo.FieldPostContent)
}

// SetContentMessages sets the "content_messages" field.
func (m *PostInfoMutation) SetContentMessages(s []snowflake.ID) {
	m.content_messages = &s
	m.appendcontent_messages = nil
}

// ContentMessages returns the value of the "content_messages" field in the mutation.
func (m *PostInfoMutation) ContentMessages() (r []snowflake.ID, exists bool) {
	v := m.content_messages
	if v == nil {
		return
	}
	return *v, true
}

// OldContentMessages returns the old "content_messages" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldContentMessages(ctx context.Context) (v []snowflake.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentMessages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentMessages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentMessages: %w", err)
	}
	return oldValue.ContentMessages, nil
}

// AppendContentMessages adds s to the "content_messages" field.
func (m *PostInfoMutation) AppendContentMessages(s []snowflake.ID) {
	m.appendcontent_messages = append(m.appendcontent_messages, s...)
}

// AppendedContentMessages returns the list of values that were appended to the "content_messages" field in this mutation.
func (m *PostInfoMutation) AppendedContentMessages() ([]snowflake.ID, bool) {
	if len(m.appendcontent_messages) == 0 {
		return nil, false
	}
	return m.appendcontent_messages, true
}

// ClearContentMessages clears the value of the "content_messages" field.
func (m *PostInfoMutation) ClearContentMessages() {
	m.content_messages = nil
	m.appendcontent_messages = nil
	m.clearedFields[postinfo.FieldContentMessages] = struct{}{}
}

// ContentMessagesCleared returns if the "content_messages" field was cleared in this mutation.
func (m *PostInfoMutation) ContentMessagesCleared() bool {
	_, ok := m.clearedFields[postinfo.FieldContentMessages]
	return ok
}

// ResetContentMessages resets all changes to the "content_messages" field.
func (m *PostInfoMutation) ResetContentMessages() {
	m.content_messages = nil
	m.appendcontent_messages = nil
	delete(m.clearedFields, postinfo.FieldContentMessages)
}

// SetChannelID sets the "channel_id" field.
func (m *PostInfoMutation) SetChannelID(s snowflake.ID) {
	m.channel_id = &s
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *PostInfoMutation) ChannelID() (r snowflake.ID, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the PostInfo entity.
// If the PostInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostInfoMutation) OldChannelID(ctx context.Context) (v snowflake.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds s to the "channel_id" field.
func (m *PostInfoMutation) AddChannelID(s snowflake.ID) {
	if m.addchannel_id != nil {
		*m.addchannel_id += s
	} else {
		m.addchannel_id = &s
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *PostInfoMutation) AddedChannelID() (r snowflake.ID, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *PostInfoMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// AddMessageIDs adds the "messages" edge to the Message entity by ids.
func (m *PostInfoMutation) AddMessageIDs(ids ...int) {
	if m.messages == nil {
		m.messages = make(map[int]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Message entity.
func (m *PostInfoMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the Message entity was cleared.
func (m *PostInfoMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Message entity by IDs.
func (m *PostInfoMutation) RemoveMessageIDs(ids ...int) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Message entity.
func (m *PostInfoMutation) RemovedMessagesIDs() (ids []int) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *PostInfoMutation) MessagesIDs() (ids []int) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *PostInfoMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Where appends a list predicates to the PostInfoMutation builder.
func (m *PostInfoMutation) Where(ps ...predicate.PostInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PostInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PostInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PostInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PostInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PostInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PostInfo).
func (m *PostInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostInfoMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.title != nil {
		fields = append(fields, postinfo.FieldTitle)
	}
	if m.last_updated != nil {
		fields = append(fields, postinfo.FieldLastUpdated)
	}
	if m.current_viewing != nil {
		fields = append(fields, postinfo.FieldCurrentViewing)
	}
	if m.force_view_expire != nil {
		fields = append(fields, postinfo.FieldForceViewExpire)
	}
	if m.should_archived != nil {
		fields = append(fields, postinfo.FieldShouldArchived)
	}
	if m.aid != nil {
		fields = append(fields, postinfo.FieldAid)
	}
	if m.url != nil {
		fields = append(fields, postinfo.FieldURL)
	}
	if m.post_content != nil {
		fields = append(fields, postinfo.FieldPostContent)
	}
	if m.content_messages != nil {
		fields = append(fields, postinfo.FieldContentMessages)
	}
	if m.channel_id != nil {
		fields = append(fields, postinfo.FieldChannelID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case postinfo.FieldTitle:
		return m.Title()
	case postinfo.FieldLastUpdated:
		return m.LastUpdated()
	case postinfo.FieldCurrentViewing:
		return m.CurrentViewing()
	case postinfo.FieldForceViewExpire:
		return m.ForceViewExpire()
	case postinfo.FieldShouldArchived:
		return m.ShouldArchived()
	case postinfo.FieldAid:
		return m.Aid()
	case postinfo.FieldURL:
		return m.URL()
	case postinfo.FieldPostContent:
		return m.PostContent()
	case postinfo.FieldContentMessages:
		return m.ContentMessages()
	case postinfo.FieldChannelID:
		return m.ChannelID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case postinfo.FieldTitle:
		return m.OldTitle(ctx)
	case postinfo.FieldLastUpdated:
		return m.OldLastUpdated(ctx)
	case postinfo.FieldCurrentViewing:
		return m.OldCurrentViewing(ctx)
	case postinfo.FieldForceViewExpire:
		return m.OldForceViewExpire(ctx)
	case postinfo.FieldShouldArchived:
		return m.OldShouldArchived(ctx)
	case postinfo.FieldAid:
		return m.OldAid(ctx)
	case postinfo.FieldURL:
		return m.OldURL(ctx)
	case postinfo.FieldPostContent:
		return m.OldPostContent(ctx)
	case postinfo.FieldContentMessages:
		return m.OldContentMessages(ctx)
	case postinfo.FieldChannelID:
		return m.OldChannelID(ctx)
	}
	return nil, fmt.Errorf("unknown PostInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case postinfo.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case postinfo.FieldLastUpdated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdated(v)
		return nil
	case postinfo.FieldCurrentViewing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentViewing(v)
		return nil
	case postinfo.FieldForceViewExpire:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForceViewExpire(v)
		return nil
	case postinfo.FieldShouldArchived:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShouldArchived(v)
		return nil
	case postinfo.FieldAid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAid(v)
		return nil
	case postinfo.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case postinfo.FieldPostContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostContent(v)
		return nil
	case postinfo.FieldContentMessages:
		v, ok := value.([]snowflake.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentMessages(v)
		return nil
	case postinfo.FieldChannelID:
		v, ok := value.(snowflake.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	}
	return fmt.Errorf("unknown PostInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostInfoMutation) AddedFields() []string {
	var fields []string
	if m.addchannel_id != nil {
		fields = append(fields, postinfo.FieldChannelID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case postinfo.FieldChannelID:
		return m.AddedChannelID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case postinfo.FieldChannelID:
		v, ok := value.(snowflake.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	}
	return fmt.Errorf("unknown PostInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(postinfo.FieldForceViewExpire) {
		fields = append(fields, postinfo.FieldForceViewExpire)
	}
	if m.FieldCleared(postinfo.FieldAid) {
		fields = append(fields, postinfo.FieldAid)
	}
	if m.FieldCleared(postinfo.FieldURL) {
		fields = append(fields, postinfo.FieldURL)
	}
	if m.FieldCleared(postinfo.FieldPostContent) {
		fields = append(fields, postinfo.FieldPostContent)
	}
	if m.FieldCleared(postinfo.FieldContentMessages) {
		fields = append(fields, postinfo.FieldContentMessages)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostInfoMutation) ClearField(name string) error {
	switch name {
	case postinfo.FieldForceViewExpire:
		m.ClearForceViewExpire()
		return nil
	case postinfo.FieldAid:
		m.ClearAid()
		return nil
	case postinfo.FieldURL:
		m.ClearURL()
		return nil
	case postinfo.FieldPostContent:
		m.ClearPostContent()
		return nil
	case postinfo.FieldContentMessages:
		m.ClearContentMessages()
		return nil
	}
	return fmt.Errorf("unknown PostInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostInfoMutation) ResetField(name string) error {
	switch name {
	case postinfo.FieldTitle:
		m.ResetTitle()
		return nil
	case postinfo.FieldLastUpdated:
		m.ResetLastUpdated()
		return nil
	case postinfo.FieldCurrentViewing:
		m.ResetCurrentViewing()
		return nil
	case postinfo.FieldForceViewExpire:
		m.ResetForceViewExpire()
		return nil
	case postinfo.FieldShouldArchived:
		m.ResetShouldArchived()
		return nil
	case postinfo.FieldAid:
		m.ResetAid()
		return nil
	case postinfo.FieldURL:
		m.ResetURL()
		return nil
	case postinfo.FieldPostContent:
		m.ResetPostContent()
		return nil
	case postinfo.FieldContentMessages:
		m.ResetContentMessages()
		return nil
	case postinfo.FieldChannelID:
		m.ResetChannelID()
		return nil
	}
	return fmt.Errorf("unknown PostInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.messages != nil {
		edges = append(edges, postinfo.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case postinfo.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmessages != nil {
		edges = append(edges, postinfo.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case postinfo.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessages {
		edges = append(edges, postinfo.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case postinfo.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PostInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostInfoMutation) ResetEdge(name string) error {
	switch name {
	case postinfo.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown PostInfo edge %s", name)
}
